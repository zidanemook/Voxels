#pragma kernel GenerateInnerCellVertices
#pragma kernel ApplyLevelOfDetail
#pragma kernel GenerateOuterCellVertices
#pragma kernel GenerateTriangles

#include "Assets/Compute/Voxels/Include/Cell.hlsl"
#include "Assets/Compute/Voxels/Include/Vertex.hlsl"
#include "Assets/Compute/Voxels/Include/Voxel.hlsl"
#include "Assets/Compute/Voxels/Include/VoxelVolume.hlsl"

static const uint nullVertexIndex = -1;
static const uint maxNumberOfIntersections = 6;

struct CellVertexInfo
{
    uint index;

    static CellVertexInfo Create()
    {
        CellVertexInfo cellVertexInfo;
        cellVertexInfo.index = nullVertexIndex;

        return cellVertexInfo;
    }
};

struct Intersection
{
    float3 position;
    float3 normal;
    uint materialIndex;

    static Intersection Create(float3 position = 0.0f, float3 normal = 0.0f, uint materialIndex = 0)
    {
        Intersection intersection;
        intersection.position = position;
        intersection.normal = normal;
        intersection.materialIndex = materialIndex;

        return intersection;
    }
};

uint cellStride;
uint schmitzParticleIterations;
float schmitzParticleStepSize;

RWStructuredBuffer<CellVertexInfo> cellVertexInfoLookupTable;
RWStructuredBuffer<Vertex> generatedVertices0;
RWStructuredBuffer<Vertex> generatedVertices1;
RWByteAddressBuffer generatedTriangles;

// Theoretically we can declare below arrays locally and pass them around functions with the "out" or "inout" modifier but that will
// result in more temporary registers being used by the compiler for some reason. See the following link for more information:
// https://gamedev.stackexchange.com/questions/190131/splitting-up-hlsl-code-into-separate-functions-causes-the-number-of-needed-tempo.
static uint numberOfIntersections;
static Intersection intersections[maxNumberOfIntersections];
static uint numberOfMaterialIndices;
static uint materialIndices[numberOfCellCorners];
static float3 forces[numberOfCellCorners];
static CellVertexInfo neighbourCellVertexInfos[3];

bool IsOuterVoxel(uint3 coordinate)
{
    return any(coordinate == 0 || coordinate == numberOfVoxels - 2);
}

uint CalculateCellVertexInfoLookupTableIndex(uint3 coordinate, uint stride = 1)
{
    coordinate = IsOuterVoxel(coordinate) ? coordinate : (coordinate - 1) / stride * stride + 1;

    return dot(coordinate, uint3(1, numberOfVoxels.x - 1, (numberOfVoxels.x - 1) * (numberOfVoxels.y - 1)));
}

float3 CalculateCombinedForce(float3 center)
{
    float alpha = center.x;

    float3 force03 = alpha * forces[3] + (1.0f - alpha) * forces[0];
    float3 force47 = alpha * forces[7] + (1.0f - alpha) * forces[4];
    float3 force12 = alpha * forces[2] + (1.0f - alpha) * forces[1];
    float3 force56 = alpha * forces[6] + (1.0f - alpha) * forces[5];

    float beta = center.z;

    float3 force0347 = beta * force47 + (1.0f - beta) * force03;
    float3 force1256 = beta * force56 + (1.0f - beta) * force12;

    float gamma = center.y;

    return gamma * force1256 + (1.0f - gamma) * force0347;
}

float3 CalculateForce(float3 corner)
{
    float3 force = 0.0f;

    [unroll(maxNumberOfIntersections)]
    for (uint intersectionIndex = 0; intersectionIndex < numberOfIntersections; intersectionIndex++)
    {
        float3 position = intersections[intersectionIndex].position;
        float3 normal = intersections[intersectionIndex].normal;
        float distance = dot(normal, corner - position);
        float3 voxelCornerToPlaneVector = -distance * normal;

        force += voxelCornerToPlaneVector;
    }

    return force;
}

uint GetDominantMaterialIndex()
{
    const uint4x4 uint4x4Identity = uint4x4
    (
        1, 0, 0, 0,
        0, 1, 0, 0,
        0, 0, 1, 0,
        0, 0, 0, 1
    );

    const uint length = (numberOfMaterials + 3) / 4;

    // We store the counts in an uint4 array so we use up less temporary registers.
    uint4 materialIndexOccurenceCounts[length];

    [unroll]
    for (uint iterator = 0; iterator < length; iterator++)
    {
        materialIndexOccurenceCounts[iterator] = 0;
    }

    [unroll(numberOfCellCorners)]
    for (uint index = 0; index < numberOfMaterialIndices; index++)
    {
        uint materialIndex = materialIndices[index];
        materialIndexOccurenceCounts[materialIndex >> 2] += uint4x4Identity[materialIndex & 3];
    }

    uint2 dominantMaterialIndexWithCorrespondingOccurenceCount = uint2(materialIndices[0], 0);

    for (index = 0; index < numberOfMaterialIndices; index++)
    {
        uint materialIndex = materialIndices[index];
        uint materialIndexOccurenceCount = materialIndexOccurenceCounts[materialIndex >> 2][materialIndex & 3];

        if (materialIndexOccurenceCount > dominantMaterialIndexWithCorrespondingOccurenceCount.y)
        {
            dominantMaterialIndexWithCorrespondingOccurenceCount = uint2(materialIndex, materialIndexOccurenceCount);
        }
    }

    return dominantMaterialIndexWithCorrespondingOccurenceCount.x;
}

Vertex CalculateCenterVertex()
{
    Vertex vertex = Vertex::Create();

    numberOfMaterialIndices = 0;

    [unroll(maxNumberOfIntersections)]
    for (uint intersectionIndex = 0; intersectionIndex < numberOfIntersections; intersectionIndex++)
    {
        Intersection intersection = intersections[intersectionIndex];

        vertex.SetPosition(vertex.GetPosition() + intersection.position);
        vertex.SetNormal(vertex.GetNormal() + intersection.normal);
        materialIndices[numberOfMaterialIndices++] = intersection.materialIndex;
    }
    vertex.SetPosition(vertex.GetPosition() / numberOfIntersections);
    vertex.SetNormal(normalize(vertex.GetNormal()));
    vertex.SetMaterialIndex(GetDominantMaterialIndex());

    return vertex;
}

Vertex CalculateCellVertex(uint3 coordinate)
{
    Vertex vertex = CalculateCenterVertex();

    for (uint cornerIndex = 0; cornerIndex < numberOfCellCorners; cornerIndex++)
    {
        forces[cornerIndex] = CalculateForce(cellCorners[cornerIndex]);
    }

    for (uint schmitzParticleIteration = 0; schmitzParticleIteration < schmitzParticleIterations; schmitzParticleIteration++)
    {
        vertex.SetPosition(vertex.GetPosition() + schmitzParticleStepSize * CalculateCombinedForce(vertex.GetPosition()));
    }
    vertex.SetPosition(VoxelToVoxelVolumeSpace(coordinate, vertex.GetPosition()));

    return vertex;
}

void CalculatePositionsAndNormals(uint3 coordinate)
{
    numberOfIntersections = 0;

    for (uint cellEdgeIndex = 0; cellEdgeIndex < numberOfCellEdges; cellEdgeIndex++)
    {
        CellEdge cellEdge = cellEdges[cellEdgeIndex];

        uint3 cellCornerA = cellCorners[cellEdge.GetCornerStartIndex()];
        uint3 cellCornerB = cellCorners[cellEdge.GetCornerEndIndex()];

        Voxel sampleA = GetVoxel(coordinate + cellCornerA);
        Voxel sampleB = GetVoxel(coordinate + cellCornerB);

        if (sampleA.IsSolid() == sampleB.IsSolid())
        {
            continue;
        }

        float interpolant = -sampleA.GetValue() / (sampleB.GetValue() - sampleA.GetValue());

        intersections[numberOfIntersections++] = Intersection::Create
        (
            lerp(cellCornerA, cellCornerB, interpolant),
            normalize(lerp(sampleA.GetGradient(), sampleB.GetGradient(), interpolant)),
            !sampleA.IsSolid() ? sampleA.materialIndex : sampleB.materialIndex
        );
    }
}

[numthreads(4, 4, 4)]
void GenerateInnerCellVertices(uint3 id : SV_DispatchThreadID)
{
    uint3 cellID = id + 1;

    if (any(cellID > numberOfVoxels - 3))
    {
        return;
    }

    CellVertexInfo cellVertexInfo = CellVertexInfo::Create();

    CalculatePositionsAndNormals(cellID);

    if (numberOfIntersections > 0)
    {
        cellVertexInfo.index = generatedVertices0.IncrementCounter();
        generatedVertices0[cellVertexInfo.index] = CalculateCellVertex(cellID);
    }
    cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(cellID)] = cellVertexInfo;
}

[numthreads(4, 4, 4)]
void ApplyLevelOfDetail(uint3 id : SV_DispatchThreadID)
{
    uint3 cellID = id * cellStride + 1;

    if (any(cellID > numberOfVoxels - 3))
    {
        return;
    }

    uint numberOfChildCellVertices = 0;
    CellVertexInfo parentCellVertexInfo = CellVertexInfo::Create();
    Vertex parentCellVertex = Vertex::Create();

    for (uint cornerIndex = 0; cornerIndex < numberOfCellCorners; cornerIndex++)
    {
        uint3 coordinate = cellID + cellStride / 2 * cellCorners[cornerIndex];
        CellVertexInfo childCellVertexInfo = cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(coordinate, cellStride / 2)];

        if (childCellVertexInfo.index != nullVertexIndex)
        {
            Vertex childCellVertex = generatedVertices0[childCellVertexInfo.index];

            parentCellVertex.SetPosition(parentCellVertex.GetPosition() + childCellVertex.GetPosition());
            parentCellVertex.SetNormal(parentCellVertex.GetNormal() + childCellVertex.GetNormal());
            materialIndices[numberOfMaterialIndices] = childCellVertex.materialIndex;

            numberOfMaterialIndices++;
            numberOfChildCellVertices++;
        }
    }

    if (numberOfChildCellVertices > 0)
    {
        parentCellVertex.SetPosition(parentCellVertex.GetPosition() / numberOfChildCellVertices);
        parentCellVertex.SetNormal(normalize(parentCellVertex.GetNormal()));
        parentCellVertex.SetMaterialIndex(GetDominantMaterialIndex());

        parentCellVertexInfo.index = generatedVertices1.IncrementCounter();
        generatedVertices1[parentCellVertexInfo.index] = parentCellVertex;
    }
    cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(cellID, cellStride)] = parentCellVertexInfo;
}

[numthreads(4, 4, 4)]
void GenerateOuterCellVertices(uint3 cellID : SV_DispatchThreadID)
{
    if (any(cellID > numberOfVoxels - 2) || !IsOuterVoxel(cellID))
    {
        return;
    }

    CellVertexInfo cellVertexInfo = CellVertexInfo::Create();

    CalculatePositionsAndNormals(cellID);

    if (numberOfIntersections > 0)
    {
        cellVertexInfo.index = generatedVertices0.IncrementCounter();
        generatedVertices0[cellVertexInfo.index] = CalculateCellVertex(cellID);
    }
    cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(cellID)] = cellVertexInfo;
}

bool ArePairwiseDistinct(uint3 indices)
{
    return indices.x != indices.y && indices.x != indices.z && indices.y != indices.z;
}

void GenerateTriangle(CellVertexInfo cellVertexInfo, CellVertexInfo firstNeighbourCellVertexInfo, CellVertexInfo secondNeighbourCellVertexInfo)
{
    uint3 indices = uint3(cellVertexInfo.index, firstNeighbourCellVertexInfo.index, secondNeighbourCellVertexInfo.index);

    if (!ArePairwiseDistinct(indices))
    {
        return;
    }

    // The first 8 bytes of the generated triangles buffer will be used to store the number of vertices/triangles
    // generated and therefore need to stay empty.
    generatedTriangles.Store3(8 + 12 * cellVertexInfoLookupTable.IncrementCounter(), indices);
}

void GetNeighbourCellsVertexInfos(uint3 coordinate, uint index)
{
    const uint3 cellCornerIndices[3] =
    {
        uint3(1, 2, 3),
        uint3(4, 5, 1),
        uint3(3, 7, 4)
    };

    uint3 vertexIndices;

    [unroll]
    for (uint iterator = 0; iterator < 3; iterator++)
    {
        neighbourCellVertexInfos[iterator] = cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(coordinate + cellCorners[cellCornerIndices[index][iterator]], cellStride)];
    }
}

CellEdge GetCellEdge(uint index)
{
    const uint3 edgeIndices = uint3(5, 6, 10);

    return cellEdges[edgeIndices[index]];
}

[numthreads(4, 4, 4)]
void GenerateTriangles(uint3 cellID : SV_DispatchThreadID)
{
    if (any(cellID > numberOfVoxels - 3))
    {
        return;
    }

    CellVertexInfo cellVertexInfo = cellVertexInfoLookupTable[CalculateCellVertexInfoLookupTableIndex(cellID, cellStride)];

    for (uint index = 0; index < 3; index++)
    {
        CellEdge cellEdge = GetCellEdge(index);

        Voxel sampleA = GetVoxel(cellID + cellCorners[cellEdge.GetCornerStartIndex()]);
        Voxel sampleB = GetVoxel(cellID + cellCorners[cellEdge.GetCornerEndIndex()]);

        if (sampleA.IsSolid() == sampleB.IsSolid())
        {
            continue;
        }

        GetNeighbourCellsVertexInfos(cellID, index);

        for (uint triangleIndex = 0; triangleIndex < 2; triangleIndex++)
        {
            CellVertexInfo firstNeighbourCellVertexInfo = neighbourCellVertexInfos[sampleB.GetValue() < 0.0f ? triangleIndex : triangleIndex + 1];
            CellVertexInfo secondNeighbourCellVertexInfo = neighbourCellVertexInfos[sampleB.GetValue() < 0.0f ? triangleIndex + 1 : triangleIndex];
            GenerateTriangle(cellVertexInfo, firstNeighbourCellVertexInfo, secondNeighbourCellVertexInfo);
        }
    }
}
